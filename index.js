// Generated by CoffeeScript 1.6.3
(function() {
  var async, debounce, exec, fs, path, _;

  fs = require('fs');

  exec = require('child_process').exec;

  _ = require('underscore');

  async = require('async');

  debounce = require('./lib/debounce');

  path = require('path');

  module.exports = function(db_name, options) {
    var api, collections, commit, dirty_collections, flush, mark_dirty;
    if (options == null) {
      options = {};
    }
    collections = {};
    dirty_collections = {};
    db_name += '.db';
    if (options.db_location) {
      db_name = path.join(options.db_location, db_name);
    }
    exec('mkdir -p ' + db_name, function(err, out, serr) {
      if (err) {
        throw err;
      }
    });
    mark_dirty = function(collection) {
      dirty_collections[collection] = 1;
      return commit();
    };
    flush = function(done) {
      return async.map(Object.keys(dirty_collections), function(collection, callback) {
        var filename;
        filename = db_name + "/" + collection + ".json";
        console.log('writing', filename);
        return fs.writeFile(filename, JSON.stringify(collections[collection]), function(err) {
          if (err) {
            throw err;
          }
          return callback();
        });
      }, function() {
        dirty_collections = {};
        return typeof done === "function" ? done() : void 0;
      });
    };
    commit = debounce(flush, 200);
    return api = {
      drop: function(collection, done) {
        var _this = this;
        return this.collection(collection, function() {
          collections[collection] = null;
          if (dirty_collections[collection]) {
            delete dirty_collections[collection];
          }
          return fs.unlink(db_name + "/" + collection + ".json", function(err) {
            if (err) {
              throw err;
            }
            return done();
          });
        });
      },
      collection: function(collection, done) {
        var filename, load_collection;
        filename = db_name + "/" + collection + ".json";
        load_collection = function() {
          return fs.readFile(filename, function(err, result) {
            if (err) {
              throw err;
            }
            if (!collections[collection]) {
              collections[collection] = JSON.parse(result + '');
            }
            return done(err);
          });
        };
        if (collections[collection] != null) {
          return done(null);
        } else {
          return fs.exists(filename, function(exists) {
            if (exists) {
              return load_collection();
            } else {
              collections[collection] = [];
              mark_dirty(collection);
              return flush(function() {
                return done(null);
              });
            }
          });
        }
      },
      all: function(collection, done) {
        var _this = this;
        return this.collection(collection, function() {
          return done(null, collections[collection]);
        });
      },
      del: function(collection, record, done) {
        var _this = this;
        if (typeof record !== 'object') {
          record = {
            _id: record
          };
        }
        return this.collection(collection, function() {
          collections[collection] = _.filter(collections[collection], function(row) {
            return row._id !== record._id;
          });
          mark_dirty(collection);
          return typeof done === "function" ? done() : void 0;
        });
      },
      put: function(collection, record, done) {
        var _this = this;
        return this.collection(collection, function() {
          if (record._id) {
            collections[collection] = _.filter(collections[collection], function(row) {
              return row._id !== record._id;
            });
          }
          collections[collection].push(record);
          mark_dirty(collection);
          return typeof done === "function" ? done() : void 0;
        });
      },
      restify: function(app) {
        var counter, post_json, store;
        store = this;
        app.get("/data/:collection/:id/del", function(req, res) {
          return store.del(req.params.collection, {
            _id: req.params.id
          }, function(err) {
            return res.send({
              success: !err,
              message: err || ''
            });
          });
        });
        app.get("/data/:collection", function(req, res) {
          return store.all(req.params.collection, function(err, results) {
            if (err) {
              throw err;
            }
            return res.send(results);
          });
        });
        counter = 0;
        post_json = function(req, res) {
          var obj, _base;
          if ((_base = req.params).id == null) {
            _base.id = (new Date).valueOf() + '' + counter;
          }
          counter += 1;
          obj = JSON.parse(req.body.data);
          if (obj._id == null) {
            obj._id = req.params.id;
          }
          return store.put(req.params.collection, obj, function(err) {
            return res.send({
              success: !err,
              message: err || ''
            });
          });
        };
        app.post("/data/:collection/:id", post_json);
        return app.post("/data/:collection", post_json);
      },
      collections: function(done) {
        return exec('mkdir -p ' + db_name, function(err, out, serr) {
          if (err) {
            throw err;
          }
          return fs.readdir(db_name, function(err, files) {
            if (err) {
              throw err;
            }
            return async.map(files, function(file, callback) {
              file = file.replace(".json", "");
              return api.collection(file, callback);
            }, function() {
              return done(collections);
            });
          });
        });
      }
    };
  };

}).call(this);
